/*
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */
/*
 * This code was generated by https://github.com/google/apis-client-generator/
 * (build: 2016-10-17 16:43:55 UTC)
 * on 2016-11-20 at 07:23:05 UTC 
 * Modify at your own risk.
 */

package com.personal.rowan.paperforspotify.backend.messaging;

/**
 * Service definition for Messaging (v1).
 *
 * <p>
 * This is an API
 * </p>
 *
 * <p>
 * For more information about this service, see the
 * <a href="" target="_blank">API Documentation</a>
 * </p>
 *
 * <p>
 * This service uses {@link MessagingRequestInitializer} to initialize global parameters via its
 * {@link Builder}.
 * </p>
 *
 * @since 1.3
 * @author Google, Inc.
 */
@SuppressWarnings("javadoc")
public class Messaging extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient {

  // Note: Leave this static initializer at the top of the file.
  static {
    com.google.api.client.util.Preconditions.checkState(
        com.google.api.client.googleapis.GoogleUtils.MAJOR_VERSION == 1 &&
        com.google.api.client.googleapis.GoogleUtils.MINOR_VERSION >= 15,
        "You are currently running with version %s of google-api-client. " +
        "You need at least version 1.15 of google-api-client to run version " +
        "1.22.0 of the messaging library.", com.google.api.client.googleapis.GoogleUtils.VERSION);
  }

  /**
   * The default encoded root URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_ROOT_URL = "https://paper-for-spotify.appspot.com/_ah/api/";

  /**
   * The default encoded service path of the service. This is determined when the library is
   * generated and normally should not be changed.
   *
   * @since 1.7
   */
  public static final String DEFAULT_SERVICE_PATH = "messaging/v1/";

  /**
   * The default encoded base URL of the service. This is determined when the library is generated
   * and normally should not be changed.
   */
  public static final String DEFAULT_BASE_URL = DEFAULT_ROOT_URL + DEFAULT_SERVICE_PATH;

  /**
   * Constructor.
   *
   * <p>
   * Use {@link Builder} if you need to specify any of the optional parameters.
   * </p>
   *
   * @param transport HTTP transport, which should normally be:
   *        <ul>
   *        <li>Google App Engine:
   *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
   *        <li>Android: {@code newCompatibleTransport} from
   *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
   *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
   *        </li>
   *        </ul>
   * @param jsonFactory JSON factory, which may be:
   *        <ul>
   *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
   *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
   *        <li>Android Honeycomb or higher:
   *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
   *        </ul>
   * @param httpRequestInitializer HTTP request initializer or {@code null} for none
   * @since 1.7
   */
  public Messaging(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
      com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
    this(new Builder(transport, jsonFactory, httpRequestInitializer));
  }

  /**
   * @param builder builder
   */
  Messaging(Builder builder) {
    super(builder);
  }

  @Override
  protected void initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest<?> httpClientRequest) throws java.io.IOException {
    super.initialize(httpClientRequest);
  }

  /**
   * Create a request for the method "addMessageToChat".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link AddMessageToChat#execute()} method to invoke the remote operation.
   *
   * @param messageId
   * @param chatId
   * @param userId
   * @param chatName
   * @param name
   * @param imageUrl
   * @param message
   * @param messageSongUri
   * @param messageSongUrl
   * @param messageSongImageUrl
   * @param messageSongName
   * @param messageArtistName
   * @return the request
   */
  public AddMessageToChat addMessageToChat(java.lang.String messageId, java.lang.String chatId, java.lang.String userId, java.lang.String chatName, java.lang.String name, java.lang.String imageUrl, java.lang.String message, java.lang.String messageSongUri, java.lang.String messageSongUrl, java.lang.String messageSongImageUrl, java.lang.String messageSongName, java.lang.String messageArtistName) throws java.io.IOException {
    AddMessageToChat result = new AddMessageToChat(messageId, chatId, userId, chatName, name, imageUrl, message, messageSongUri, messageSongUrl, messageSongImageUrl, messageSongName, messageArtistName);
    initialize(result);
    return result;
  }

  public class AddMessageToChat extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessage> {

    private static final String REST_PATH = "addMessageToChat/{messageId}/{chatId}/{userId}/{chatName}/{name}/{imageUrl}/{message}/{messageSongUri}/{messageSongUrl}/{messageSongImageUrl}/{messageSongName}/{messageArtistName}";

    /**
     * Create a request for the method "addMessageToChat".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link AddMessageToChat#execute()} method to invoke the remote
     * operation. <p> {@link AddMessageToChat#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param messageId
     * @param chatId
     * @param userId
     * @param chatName
     * @param name
     * @param imageUrl
     * @param message
     * @param messageSongUri
     * @param messageSongUrl
     * @param messageSongImageUrl
     * @param messageSongName
     * @param messageArtistName
     * @since 1.13
     */
    protected AddMessageToChat(java.lang.String messageId, java.lang.String chatId, java.lang.String userId, java.lang.String chatName, java.lang.String name, java.lang.String imageUrl, java.lang.String message, java.lang.String messageSongUri, java.lang.String messageSongUrl, java.lang.String messageSongImageUrl, java.lang.String messageSongName, java.lang.String messageArtistName) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessage.class);
      this.messageId = com.google.api.client.util.Preconditions.checkNotNull(messageId, "Required parameter messageId must be specified.");
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.chatName = com.google.api.client.util.Preconditions.checkNotNull(chatName, "Required parameter chatName must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
      this.imageUrl = com.google.api.client.util.Preconditions.checkNotNull(imageUrl, "Required parameter imageUrl must be specified.");
      this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
      this.messageSongUri = com.google.api.client.util.Preconditions.checkNotNull(messageSongUri, "Required parameter messageSongUri must be specified.");
      this.messageSongUrl = com.google.api.client.util.Preconditions.checkNotNull(messageSongUrl, "Required parameter messageSongUrl must be specified.");
      this.messageSongImageUrl = com.google.api.client.util.Preconditions.checkNotNull(messageSongImageUrl, "Required parameter messageSongImageUrl must be specified.");
      this.messageSongName = com.google.api.client.util.Preconditions.checkNotNull(messageSongName, "Required parameter messageSongName must be specified.");
      this.messageArtistName = com.google.api.client.util.Preconditions.checkNotNull(messageArtistName, "Required parameter messageArtistName must be specified.");
    }

    @Override
    public AddMessageToChat setAlt(java.lang.String alt) {
      return (AddMessageToChat) super.setAlt(alt);
    }

    @Override
    public AddMessageToChat setFields(java.lang.String fields) {
      return (AddMessageToChat) super.setFields(fields);
    }

    @Override
    public AddMessageToChat setKey(java.lang.String key) {
      return (AddMessageToChat) super.setKey(key);
    }

    @Override
    public AddMessageToChat setOauthToken(java.lang.String oauthToken) {
      return (AddMessageToChat) super.setOauthToken(oauthToken);
    }

    @Override
    public AddMessageToChat setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddMessageToChat) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddMessageToChat setQuotaUser(java.lang.String quotaUser) {
      return (AddMessageToChat) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddMessageToChat setUserIp(java.lang.String userIp) {
      return (AddMessageToChat) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String messageId;

    /**

     */
    public java.lang.String getMessageId() {
      return messageId;
    }

    public AddMessageToChat setMessageId(java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public AddMessageToChat setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public AddMessageToChat setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatName;

    /**

     */
    public java.lang.String getChatName() {
      return chatName;
    }

    public AddMessageToChat setChatName(java.lang.String chatName) {
      this.chatName = chatName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public AddMessageToChat setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String imageUrl;

    /**

     */
    public java.lang.String getImageUrl() {
      return imageUrl;
    }

    public AddMessageToChat setImageUrl(java.lang.String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String message;

    /**

     */
    public java.lang.String getMessage() {
      return message;
    }

    public AddMessageToChat setMessage(java.lang.String message) {
      this.message = message;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String messageSongUri;

    /**

     */
    public java.lang.String getMessageSongUri() {
      return messageSongUri;
    }

    public AddMessageToChat setMessageSongUri(java.lang.String messageSongUri) {
      this.messageSongUri = messageSongUri;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String messageSongUrl;

    /**

     */
    public java.lang.String getMessageSongUrl() {
      return messageSongUrl;
    }

    public AddMessageToChat setMessageSongUrl(java.lang.String messageSongUrl) {
      this.messageSongUrl = messageSongUrl;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String messageSongImageUrl;

    /**

     */
    public java.lang.String getMessageSongImageUrl() {
      return messageSongImageUrl;
    }

    public AddMessageToChat setMessageSongImageUrl(java.lang.String messageSongImageUrl) {
      this.messageSongImageUrl = messageSongImageUrl;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String messageSongName;

    /**

     */
    public java.lang.String getMessageSongName() {
      return messageSongName;
    }

    public AddMessageToChat setMessageSongName(java.lang.String messageSongName) {
      this.messageSongName = messageSongName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String messageArtistName;

    /**

     */
    public java.lang.String getMessageArtistName() {
      return messageArtistName;
    }

    public AddMessageToChat setMessageArtistName(java.lang.String messageArtistName) {
      this.messageArtistName = messageArtistName;
      return this;
    }

    @Override
    public AddMessageToChat set(String parameterName, Object value) {
      return (AddMessageToChat) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addSongToChat".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link AddSongToChat#execute()} method to invoke the remote operation.
   *
   * @param chatId
   * @param chatSongUri
   * @param chatSongUrl
   * @param chatSongImageUrl
   * @param chatSongName
   * @param chatSongArtistName
   * @param userId
   * @param name
   * @return the request
   */
  public AddSongToChat addSongToChat(java.lang.String chatId, java.lang.String chatSongUri, java.lang.String chatSongUrl, java.lang.String chatSongImageUrl, java.lang.String chatSongName, java.lang.String chatSongArtistName, java.lang.String userId, java.lang.String name) throws java.io.IOException {
    AddSongToChat result = new AddSongToChat(chatId, chatSongUri, chatSongUrl, chatSongImageUrl, chatSongName, chatSongArtistName, userId, name);
    initialize(result);
    return result;
  }

  public class AddSongToChat extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.Chat> {

    private static final String REST_PATH = "addSongToChat/{chatId}/{chatSongUri}/{chatSongUrl}/{chatSongImageUrl}/{chatSongName}/{chatSongArtistName}/{userId}/{name}";

    /**
     * Create a request for the method "addSongToChat".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link AddSongToChat#execute()} method to invoke the remote
     * operation. <p> {@link AddSongToChat#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param chatId
     * @param chatSongUri
     * @param chatSongUrl
     * @param chatSongImageUrl
     * @param chatSongName
     * @param chatSongArtistName
     * @param userId
     * @param name
     * @since 1.13
     */
    protected AddSongToChat(java.lang.String chatId, java.lang.String chatSongUri, java.lang.String chatSongUrl, java.lang.String chatSongImageUrl, java.lang.String chatSongName, java.lang.String chatSongArtistName, java.lang.String userId, java.lang.String name) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.Chat.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.chatSongUri = com.google.api.client.util.Preconditions.checkNotNull(chatSongUri, "Required parameter chatSongUri must be specified.");
      this.chatSongUrl = com.google.api.client.util.Preconditions.checkNotNull(chatSongUrl, "Required parameter chatSongUrl must be specified.");
      this.chatSongImageUrl = com.google.api.client.util.Preconditions.checkNotNull(chatSongImageUrl, "Required parameter chatSongImageUrl must be specified.");
      this.chatSongName = com.google.api.client.util.Preconditions.checkNotNull(chatSongName, "Required parameter chatSongName must be specified.");
      this.chatSongArtistName = com.google.api.client.util.Preconditions.checkNotNull(chatSongArtistName, "Required parameter chatSongArtistName must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
    }

    @Override
    public AddSongToChat setAlt(java.lang.String alt) {
      return (AddSongToChat) super.setAlt(alt);
    }

    @Override
    public AddSongToChat setFields(java.lang.String fields) {
      return (AddSongToChat) super.setFields(fields);
    }

    @Override
    public AddSongToChat setKey(java.lang.String key) {
      return (AddSongToChat) super.setKey(key);
    }

    @Override
    public AddSongToChat setOauthToken(java.lang.String oauthToken) {
      return (AddSongToChat) super.setOauthToken(oauthToken);
    }

    @Override
    public AddSongToChat setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddSongToChat) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddSongToChat setQuotaUser(java.lang.String quotaUser) {
      return (AddSongToChat) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddSongToChat setUserIp(java.lang.String userIp) {
      return (AddSongToChat) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public AddSongToChat setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatSongUri;

    /**

     */
    public java.lang.String getChatSongUri() {
      return chatSongUri;
    }

    public AddSongToChat setChatSongUri(java.lang.String chatSongUri) {
      this.chatSongUri = chatSongUri;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatSongUrl;

    /**

     */
    public java.lang.String getChatSongUrl() {
      return chatSongUrl;
    }

    public AddSongToChat setChatSongUrl(java.lang.String chatSongUrl) {
      this.chatSongUrl = chatSongUrl;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatSongImageUrl;

    /**

     */
    public java.lang.String getChatSongImageUrl() {
      return chatSongImageUrl;
    }

    public AddSongToChat setChatSongImageUrl(java.lang.String chatSongImageUrl) {
      this.chatSongImageUrl = chatSongImageUrl;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatSongName;

    /**

     */
    public java.lang.String getChatSongName() {
      return chatSongName;
    }

    public AddSongToChat setChatSongName(java.lang.String chatSongName) {
      this.chatSongName = chatSongName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatSongArtistName;

    /**

     */
    public java.lang.String getChatSongArtistName() {
      return chatSongArtistName;
    }

    public AddSongToChat setChatSongArtistName(java.lang.String chatSongArtistName) {
      this.chatSongArtistName = chatSongArtistName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public AddSongToChat setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public AddSongToChat setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @Override
    public AddSongToChat set(String parameterName, Object value) {
      return (AddSongToChat) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addTextOnlyMessageToChat".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link AddTextOnlyMessageToChat#execute()} method to invoke the remote
   * operation.
   *
   * @param messageId
   * @param chatId
   * @param userId
   * @param chatName
   * @param name
   * @param imageUrl
   * @param message
   * @return the request
   */
  public AddTextOnlyMessageToChat addTextOnlyMessageToChat(java.lang.String messageId, java.lang.String chatId, java.lang.String userId, java.lang.String chatName, java.lang.String name, java.lang.String imageUrl, java.lang.String message) throws java.io.IOException {
    AddTextOnlyMessageToChat result = new AddTextOnlyMessageToChat(messageId, chatId, userId, chatName, name, imageUrl, message);
    initialize(result);
    return result;
  }

  public class AddTextOnlyMessageToChat extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessage> {

    private static final String REST_PATH = "addTextOnlyMessageToChat/{messageId}/{chatId}/{userId}/{chatName}/{name}/{imageUrl}/{message}";

    /**
     * Create a request for the method "addTextOnlyMessageToChat".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link AddTextOnlyMessageToChat#execute()} method to invoke the
     * remote operation. <p> {@link AddTextOnlyMessageToChat#initialize(com.google.api.client.googleap
     * is.services.AbstractGoogleClientRequest)} must be called to initialize this instance
     * immediately after invoking the constructor. </p>
     *
     * @param messageId
     * @param chatId
     * @param userId
     * @param chatName
     * @param name
     * @param imageUrl
     * @param message
     * @since 1.13
     */
    protected AddTextOnlyMessageToChat(java.lang.String messageId, java.lang.String chatId, java.lang.String userId, java.lang.String chatName, java.lang.String name, java.lang.String imageUrl, java.lang.String message) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessage.class);
      this.messageId = com.google.api.client.util.Preconditions.checkNotNull(messageId, "Required parameter messageId must be specified.");
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.chatName = com.google.api.client.util.Preconditions.checkNotNull(chatName, "Required parameter chatName must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
      this.imageUrl = com.google.api.client.util.Preconditions.checkNotNull(imageUrl, "Required parameter imageUrl must be specified.");
      this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
    }

    @Override
    public AddTextOnlyMessageToChat setAlt(java.lang.String alt) {
      return (AddTextOnlyMessageToChat) super.setAlt(alt);
    }

    @Override
    public AddTextOnlyMessageToChat setFields(java.lang.String fields) {
      return (AddTextOnlyMessageToChat) super.setFields(fields);
    }

    @Override
    public AddTextOnlyMessageToChat setKey(java.lang.String key) {
      return (AddTextOnlyMessageToChat) super.setKey(key);
    }

    @Override
    public AddTextOnlyMessageToChat setOauthToken(java.lang.String oauthToken) {
      return (AddTextOnlyMessageToChat) super.setOauthToken(oauthToken);
    }

    @Override
    public AddTextOnlyMessageToChat setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddTextOnlyMessageToChat) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddTextOnlyMessageToChat setQuotaUser(java.lang.String quotaUser) {
      return (AddTextOnlyMessageToChat) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddTextOnlyMessageToChat setUserIp(java.lang.String userIp) {
      return (AddTextOnlyMessageToChat) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String messageId;

    /**

     */
    public java.lang.String getMessageId() {
      return messageId;
    }

    public AddTextOnlyMessageToChat setMessageId(java.lang.String messageId) {
      this.messageId = messageId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public AddTextOnlyMessageToChat setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public AddTextOnlyMessageToChat setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatName;

    /**

     */
    public java.lang.String getChatName() {
      return chatName;
    }

    public AddTextOnlyMessageToChat setChatName(java.lang.String chatName) {
      this.chatName = chatName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public AddTextOnlyMessageToChat setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String imageUrl;

    /**

     */
    public java.lang.String getImageUrl() {
      return imageUrl;
    }

    public AddTextOnlyMessageToChat setImageUrl(java.lang.String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String message;

    /**

     */
    public java.lang.String getMessage() {
      return message;
    }

    public AddTextOnlyMessageToChat setMessage(java.lang.String message) {
      this.message = message;
      return this;
    }

    @Override
    public AddTextOnlyMessageToChat set(String parameterName, Object value) {
      return (AddTextOnlyMessageToChat) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "addUsersToChat".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link AddUsersToChat#execute()} method to invoke the remote operation.
   *
   * @param creatorId
   * @param creatorName
   * @param chatName
   * @param chatId
   * @param csvUserIds
   * @return the request
   */
  public AddUsersToChat addUsersToChat(java.lang.String creatorId, java.lang.String creatorName, java.lang.String chatName, java.lang.String chatId, java.lang.String csvUserIds) throws java.io.IOException {
    AddUsersToChat result = new AddUsersToChat(creatorId, creatorName, chatName, chatId, csvUserIds);
    initialize(result);
    return result;
  }

  public class AddUsersToChat extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ChatMembershipCollection> {

    private static final String REST_PATH = "addUsersToChat/{creatorId}/{creatorName}/{chatName}/{chatId}/{csvUserIds}";

    /**
     * Create a request for the method "addUsersToChat".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link AddUsersToChat#execute()} method to invoke the remote
     * operation. <p> {@link AddUsersToChat#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param creatorId
     * @param creatorName
     * @param chatName
     * @param chatId
     * @param csvUserIds
     * @since 1.13
     */
    protected AddUsersToChat(java.lang.String creatorId, java.lang.String creatorName, java.lang.String chatName, java.lang.String chatId, java.lang.String csvUserIds) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ChatMembershipCollection.class);
      this.creatorId = com.google.api.client.util.Preconditions.checkNotNull(creatorId, "Required parameter creatorId must be specified.");
      this.creatorName = com.google.api.client.util.Preconditions.checkNotNull(creatorName, "Required parameter creatorName must be specified.");
      this.chatName = com.google.api.client.util.Preconditions.checkNotNull(chatName, "Required parameter chatName must be specified.");
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.csvUserIds = com.google.api.client.util.Preconditions.checkNotNull(csvUserIds, "Required parameter csvUserIds must be specified.");
    }

    @Override
    public AddUsersToChat setAlt(java.lang.String alt) {
      return (AddUsersToChat) super.setAlt(alt);
    }

    @Override
    public AddUsersToChat setFields(java.lang.String fields) {
      return (AddUsersToChat) super.setFields(fields);
    }

    @Override
    public AddUsersToChat setKey(java.lang.String key) {
      return (AddUsersToChat) super.setKey(key);
    }

    @Override
    public AddUsersToChat setOauthToken(java.lang.String oauthToken) {
      return (AddUsersToChat) super.setOauthToken(oauthToken);
    }

    @Override
    public AddUsersToChat setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AddUsersToChat) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AddUsersToChat setQuotaUser(java.lang.String quotaUser) {
      return (AddUsersToChat) super.setQuotaUser(quotaUser);
    }

    @Override
    public AddUsersToChat setUserIp(java.lang.String userIp) {
      return (AddUsersToChat) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String creatorId;

    /**

     */
    public java.lang.String getCreatorId() {
      return creatorId;
    }

    public AddUsersToChat setCreatorId(java.lang.String creatorId) {
      this.creatorId = creatorId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String creatorName;

    /**

     */
    public java.lang.String getCreatorName() {
      return creatorName;
    }

    public AddUsersToChat setCreatorName(java.lang.String creatorName) {
      this.creatorName = creatorName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatName;

    /**

     */
    public java.lang.String getChatName() {
      return chatName;
    }

    public AddUsersToChat setChatName(java.lang.String chatName) {
      this.chatName = chatName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public AddUsersToChat setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String csvUserIds;

    /**

     */
    public java.lang.String getCsvUserIds() {
      return csvUserIds;
    }

    public AddUsersToChat setCsvUserIds(java.lang.String csvUserIds) {
      this.csvUserIds = csvUserIds;
      return this;
    }

    @Override
    public AddUsersToChat set(String parameterName, Object value) {
      return (AddUsersToChat) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "allUsers".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link AllUsers#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @return the request
   */
  public AllUsers allUsers(java.lang.String userId) throws java.io.IOException {
    AllUsers result = new AllUsers(userId);
    initialize(result);
    return result;
  }

  public class AllUsers extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.UserCollection> {

    private static final String REST_PATH = "allUsers/{userId}";

    /**
     * Create a request for the method "allUsers".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link AllUsers#execute()} method to invoke the remote operation.
     * <p> {@link
     * AllUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected AllUsers(java.lang.String userId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.UserCollection.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public AllUsers setAlt(java.lang.String alt) {
      return (AllUsers) super.setAlt(alt);
    }

    @Override
    public AllUsers setFields(java.lang.String fields) {
      return (AllUsers) super.setFields(fields);
    }

    @Override
    public AllUsers setKey(java.lang.String key) {
      return (AllUsers) super.setKey(key);
    }

    @Override
    public AllUsers setOauthToken(java.lang.String oauthToken) {
      return (AllUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public AllUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AllUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AllUsers setQuotaUser(java.lang.String quotaUser) {
      return (AllUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public AllUsers setUserIp(java.lang.String userIp) {
      return (AllUsers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public AllUsers setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public AllUsers set(String parameterName, Object value) {
      return (AllUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "answerFriendship".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link AnswerFriendship#execute()} method to invoke the remote operation.
   *
   * @param initiatorId
   * @param receiverId
   * @param rejected
   * @return the request
   */
  public AnswerFriendship answerFriendship(java.lang.String initiatorId, java.lang.String receiverId, java.lang.Integer rejected) throws java.io.IOException {
    AnswerFriendship result = new AnswerFriendship(initiatorId, receiverId, rejected);
    initialize(result);
    return result;
  }

  public class AnswerFriendship extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.Friendship> {

    private static final String REST_PATH = "answerFriendship/{initiatorId}/{receiverId}/{rejected}";

    /**
     * Create a request for the method "answerFriendship".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link AnswerFriendship#execute()} method to invoke the remote
     * operation. <p> {@link AnswerFriendship#initialize(com.google.api.client.googleapis.services.Abs
     * tractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param initiatorId
     * @param receiverId
     * @param rejected
     * @since 1.13
     */
    protected AnswerFriendship(java.lang.String initiatorId, java.lang.String receiverId, java.lang.Integer rejected) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.Friendship.class);
      this.initiatorId = com.google.api.client.util.Preconditions.checkNotNull(initiatorId, "Required parameter initiatorId must be specified.");
      this.receiverId = com.google.api.client.util.Preconditions.checkNotNull(receiverId, "Required parameter receiverId must be specified.");
      this.rejected = com.google.api.client.util.Preconditions.checkNotNull(rejected, "Required parameter rejected must be specified.");
    }

    @Override
    public AnswerFriendship setAlt(java.lang.String alt) {
      return (AnswerFriendship) super.setAlt(alt);
    }

    @Override
    public AnswerFriendship setFields(java.lang.String fields) {
      return (AnswerFriendship) super.setFields(fields);
    }

    @Override
    public AnswerFriendship setKey(java.lang.String key) {
      return (AnswerFriendship) super.setKey(key);
    }

    @Override
    public AnswerFriendship setOauthToken(java.lang.String oauthToken) {
      return (AnswerFriendship) super.setOauthToken(oauthToken);
    }

    @Override
    public AnswerFriendship setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (AnswerFriendship) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public AnswerFriendship setQuotaUser(java.lang.String quotaUser) {
      return (AnswerFriendship) super.setQuotaUser(quotaUser);
    }

    @Override
    public AnswerFriendship setUserIp(java.lang.String userIp) {
      return (AnswerFriendship) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String initiatorId;

    /**

     */
    public java.lang.String getInitiatorId() {
      return initiatorId;
    }

    public AnswerFriendship setInitiatorId(java.lang.String initiatorId) {
      this.initiatorId = initiatorId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String receiverId;

    /**

     */
    public java.lang.String getReceiverId() {
      return receiverId;
    }

    public AnswerFriendship setReceiverId(java.lang.String receiverId) {
      this.receiverId = receiverId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Integer rejected;

    /**

     */
    public java.lang.Integer getRejected() {
      return rejected;
    }

    public AnswerFriendship setRejected(java.lang.Integer rejected) {
      this.rejected = rejected;
      return this;
    }

    @Override
    public AnswerFriendship set(String parameterName, Object value) {
      return (AnswerFriendship) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "chatById".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link ChatById#execute()} method to invoke the remote operation.
   *
   * @param chatId
   * @return the request
   */
  public ChatById chatById(java.lang.String chatId) throws java.io.IOException {
    ChatById result = new ChatById(chatId);
    initialize(result);
    return result;
  }

  public class ChatById extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.Chat> {

    private static final String REST_PATH = "chatById/{chatId}";

    /**
     * Create a request for the method "chatById".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link ChatById#execute()} method to invoke the remote operation.
     * <p> {@link
     * ChatById#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param chatId
     * @since 1.13
     */
    protected ChatById(java.lang.String chatId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.Chat.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
    }

    @Override
    public ChatById setAlt(java.lang.String alt) {
      return (ChatById) super.setAlt(alt);
    }

    @Override
    public ChatById setFields(java.lang.String fields) {
      return (ChatById) super.setFields(fields);
    }

    @Override
    public ChatById setKey(java.lang.String key) {
      return (ChatById) super.setKey(key);
    }

    @Override
    public ChatById setOauthToken(java.lang.String oauthToken) {
      return (ChatById) super.setOauthToken(oauthToken);
    }

    @Override
    public ChatById setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ChatById) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ChatById setQuotaUser(java.lang.String quotaUser) {
      return (ChatById) super.setQuotaUser(quotaUser);
    }

    @Override
    public ChatById setUserIp(java.lang.String userIp) {
      return (ChatById) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public ChatById setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @Override
    public ChatById set(String parameterName, Object value) {
      return (ChatById) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "chatByUserId".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link ChatByUserId#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @return the request
   */
  public ChatByUserId chatByUserId(java.lang.String userId) throws java.io.IOException {
    ChatByUserId result = new ChatByUserId(userId);
    initialize(result);
    return result;
  }

  public class ChatByUserId extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ChatCollection> {

    private static final String REST_PATH = "chatByUserId/{userId}";

    /**
     * Create a request for the method "chatByUserId".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link ChatByUserId#execute()} method to invoke the remote
     * operation. <p> {@link
     * ChatByUserId#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected ChatByUserId(java.lang.String userId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ChatCollection.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public ChatByUserId setAlt(java.lang.String alt) {
      return (ChatByUserId) super.setAlt(alt);
    }

    @Override
    public ChatByUserId setFields(java.lang.String fields) {
      return (ChatByUserId) super.setFields(fields);
    }

    @Override
    public ChatByUserId setKey(java.lang.String key) {
      return (ChatByUserId) super.setKey(key);
    }

    @Override
    public ChatByUserId setOauthToken(java.lang.String oauthToken) {
      return (ChatByUserId) super.setOauthToken(oauthToken);
    }

    @Override
    public ChatByUserId setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ChatByUserId) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ChatByUserId setQuotaUser(java.lang.String quotaUser) {
      return (ChatByUserId) super.setQuotaUser(quotaUser);
    }

    @Override
    public ChatByUserId setUserIp(java.lang.String userIp) {
      return (ChatByUserId) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public ChatByUserId setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public ChatByUserId set(String parameterName, Object value) {
      return (ChatByUserId) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "clearUserFromChat".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link ClearUserFromChat#execute()} method to invoke the remote operation.
   *
   * @param chatId
   * @param chatName
   * @param userId
   * @param name
   * @return the request
   */
  public ClearUserFromChat clearUserFromChat(java.lang.String chatId, java.lang.String chatName, java.lang.String userId, java.lang.String name) throws java.io.IOException {
    ClearUserFromChat result = new ClearUserFromChat(chatId, chatName, userId, name);
    initialize(result);
    return result;
  }

  public class ClearUserFromChat extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ChatMembershipCollection> {

    private static final String REST_PATH = "clearUserFromChat/{chatId}/{chatName}/{userId}/{name}";

    /**
     * Create a request for the method "clearUserFromChat".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link ClearUserFromChat#execute()} method to invoke the remote
     * operation. <p> {@link ClearUserFromChat#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param chatId
     * @param chatName
     * @param userId
     * @param name
     * @since 1.13
     */
    protected ClearUserFromChat(java.lang.String chatId, java.lang.String chatName, java.lang.String userId, java.lang.String name) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ChatMembershipCollection.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.chatName = com.google.api.client.util.Preconditions.checkNotNull(chatName, "Required parameter chatName must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
    }

    @Override
    public ClearUserFromChat setAlt(java.lang.String alt) {
      return (ClearUserFromChat) super.setAlt(alt);
    }

    @Override
    public ClearUserFromChat setFields(java.lang.String fields) {
      return (ClearUserFromChat) super.setFields(fields);
    }

    @Override
    public ClearUserFromChat setKey(java.lang.String key) {
      return (ClearUserFromChat) super.setKey(key);
    }

    @Override
    public ClearUserFromChat setOauthToken(java.lang.String oauthToken) {
      return (ClearUserFromChat) super.setOauthToken(oauthToken);
    }

    @Override
    public ClearUserFromChat setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ClearUserFromChat) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ClearUserFromChat setQuotaUser(java.lang.String quotaUser) {
      return (ClearUserFromChat) super.setQuotaUser(quotaUser);
    }

    @Override
    public ClearUserFromChat setUserIp(java.lang.String userIp) {
      return (ClearUserFromChat) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public ClearUserFromChat setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatName;

    /**

     */
    public java.lang.String getChatName() {
      return chatName;
    }

    public ClearUserFromChat setChatName(java.lang.String chatName) {
      this.chatName = chatName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public ClearUserFromChat setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public ClearUserFromChat setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @Override
    public ClearUserFromChat set(String parameterName, Object value) {
      return (ClearUserFromChat) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "friendsForUser".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link FriendsForUser#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @return the request
   */
  public FriendsForUser friendsForUser(java.lang.String userId) throws java.io.IOException {
    FriendsForUser result = new FriendsForUser(userId);
    initialize(result);
    return result;
  }

  public class FriendsForUser extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.FriendCollection> {

    private static final String REST_PATH = "friendsForUser/{userId}";

    /**
     * Create a request for the method "friendsForUser".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link FriendsForUser#execute()} method to invoke the remote
     * operation. <p> {@link FriendsForUser#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @since 1.13
     */
    protected FriendsForUser(java.lang.String userId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.FriendCollection.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public FriendsForUser setAlt(java.lang.String alt) {
      return (FriendsForUser) super.setAlt(alt);
    }

    @Override
    public FriendsForUser setFields(java.lang.String fields) {
      return (FriendsForUser) super.setFields(fields);
    }

    @Override
    public FriendsForUser setKey(java.lang.String key) {
      return (FriendsForUser) super.setKey(key);
    }

    @Override
    public FriendsForUser setOauthToken(java.lang.String oauthToken) {
      return (FriendsForUser) super.setOauthToken(oauthToken);
    }

    @Override
    public FriendsForUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (FriendsForUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public FriendsForUser setQuotaUser(java.lang.String quotaUser) {
      return (FriendsForUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public FriendsForUser setUserIp(java.lang.String userIp) {
      return (FriendsForUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public FriendsForUser setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public FriendsForUser set(String parameterName, Object value) {
      return (FriendsForUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "login".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link Login#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param name
   * @param imageUrl
   * @return the request
   */
  public Login login(java.lang.String userId, java.lang.String name, java.lang.String imageUrl) throws java.io.IOException {
    Login result = new Login(userId, name, imageUrl);
    initialize(result);
    return result;
  }

  public class Login extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.User> {

    private static final String REST_PATH = "login/{userId}/{name}/{imageUrl}";

    /**
     * Create a request for the method "login".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link Login#execute()} method to invoke the remote operation.
     * <p> {@link
     * Login#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)} must
     * be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param name
     * @param imageUrl
     * @since 1.13
     */
    protected Login(java.lang.String userId, java.lang.String name, java.lang.String imageUrl) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.User.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
      this.imageUrl = com.google.api.client.util.Preconditions.checkNotNull(imageUrl, "Required parameter imageUrl must be specified.");
    }

    @Override
    public Login setAlt(java.lang.String alt) {
      return (Login) super.setAlt(alt);
    }

    @Override
    public Login setFields(java.lang.String fields) {
      return (Login) super.setFields(fields);
    }

    @Override
    public Login setKey(java.lang.String key) {
      return (Login) super.setKey(key);
    }

    @Override
    public Login setOauthToken(java.lang.String oauthToken) {
      return (Login) super.setOauthToken(oauthToken);
    }

    @Override
    public Login setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (Login) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public Login setQuotaUser(java.lang.String quotaUser) {
      return (Login) super.setQuotaUser(quotaUser);
    }

    @Override
    public Login setUserIp(java.lang.String userIp) {
      return (Login) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public Login setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public Login setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String imageUrl;

    /**

     */
    public java.lang.String getImageUrl() {
      return imageUrl;
    }

    public Login setImageUrl(java.lang.String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    @Override
    public Login set(String parameterName, Object value) {
      return (Login) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "messagesByChat".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link MessagesByChat#execute()} method to invoke the remote operation.
   *
   * @param chatId
   * @param userId
   * @param doNotMark
   * @return the request
   */
  public MessagesByChat messagesByChat(java.lang.String chatId, java.lang.String userId, java.lang.String doNotMark) throws java.io.IOException {
    MessagesByChat result = new MessagesByChat(chatId, userId, doNotMark);
    initialize(result);
    return result;
  }

  public class MessagesByChat extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessageCollection> {

    private static final String REST_PATH = "messagesByChat/{chatId}/{userId}/{doNotMark}";

    /**
     * Create a request for the method "messagesByChat".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link MessagesByChat#execute()} method to invoke the remote
     * operation. <p> {@link MessagesByChat#initialize(com.google.api.client.googleapis.services.Abstr
     * actGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param chatId
     * @param userId
     * @param doNotMark
     * @since 1.13
     */
    protected MessagesByChat(java.lang.String chatId, java.lang.String userId, java.lang.String doNotMark) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessageCollection.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.doNotMark = com.google.api.client.util.Preconditions.checkNotNull(doNotMark, "Required parameter doNotMark must be specified.");
    }

    @Override
    public MessagesByChat setAlt(java.lang.String alt) {
      return (MessagesByChat) super.setAlt(alt);
    }

    @Override
    public MessagesByChat setFields(java.lang.String fields) {
      return (MessagesByChat) super.setFields(fields);
    }

    @Override
    public MessagesByChat setKey(java.lang.String key) {
      return (MessagesByChat) super.setKey(key);
    }

    @Override
    public MessagesByChat setOauthToken(java.lang.String oauthToken) {
      return (MessagesByChat) super.setOauthToken(oauthToken);
    }

    @Override
    public MessagesByChat setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (MessagesByChat) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public MessagesByChat setQuotaUser(java.lang.String quotaUser) {
      return (MessagesByChat) super.setQuotaUser(quotaUser);
    }

    @Override
    public MessagesByChat setUserIp(java.lang.String userIp) {
      return (MessagesByChat) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public MessagesByChat setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public MessagesByChat setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String doNotMark;

    /**

     */
    public java.lang.String getDoNotMark() {
      return doNotMark;
    }

    public MessagesByChat setDoNotMark(java.lang.String doNotMark) {
      this.doNotMark = doNotMark;
      return this;
    }

    @Override
    public MessagesByChat set(String parameterName, Object value) {
      return (MessagesByChat) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "messagesByChatUpdate".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link MessagesByChatUpdate#execute()} method to invoke the remote
   * operation.
   *
   * @param chatId
   * @param timestamp
   * @param userId
   * @param doNotMark
   * @return the request
   */
  public MessagesByChatUpdate messagesByChatUpdate(java.lang.String chatId, java.lang.Long timestamp, java.lang.String userId, java.lang.String doNotMark) throws java.io.IOException {
    MessagesByChatUpdate result = new MessagesByChatUpdate(chatId, timestamp, userId, doNotMark);
    initialize(result);
    return result;
  }

  public class MessagesByChatUpdate extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessageCollection> {

    private static final String REST_PATH = "messagesByChatUpdate/{chatId}/{timestamp}/{userId}/{doNotMark}";

    /**
     * Create a request for the method "messagesByChatUpdate".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link MessagesByChatUpdate#execute()} method to invoke the
     * remote operation. <p> {@link MessagesByChatUpdate#initialize(com.google.api.client.googleapis.s
     * ervices.AbstractGoogleClientRequest)} must be called to initialize this instance immediately
     * after invoking the constructor. </p>
     *
     * @param chatId
     * @param timestamp
     * @param userId
     * @param doNotMark
     * @since 1.13
     */
    protected MessagesByChatUpdate(java.lang.String chatId, java.lang.Long timestamp, java.lang.String userId, java.lang.String doNotMark) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ChatMessageCollection.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.timestamp = com.google.api.client.util.Preconditions.checkNotNull(timestamp, "Required parameter timestamp must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.doNotMark = com.google.api.client.util.Preconditions.checkNotNull(doNotMark, "Required parameter doNotMark must be specified.");
    }

    @Override
    public MessagesByChatUpdate setAlt(java.lang.String alt) {
      return (MessagesByChatUpdate) super.setAlt(alt);
    }

    @Override
    public MessagesByChatUpdate setFields(java.lang.String fields) {
      return (MessagesByChatUpdate) super.setFields(fields);
    }

    @Override
    public MessagesByChatUpdate setKey(java.lang.String key) {
      return (MessagesByChatUpdate) super.setKey(key);
    }

    @Override
    public MessagesByChatUpdate setOauthToken(java.lang.String oauthToken) {
      return (MessagesByChatUpdate) super.setOauthToken(oauthToken);
    }

    @Override
    public MessagesByChatUpdate setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (MessagesByChatUpdate) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public MessagesByChatUpdate setQuotaUser(java.lang.String quotaUser) {
      return (MessagesByChatUpdate) super.setQuotaUser(quotaUser);
    }

    @Override
    public MessagesByChatUpdate setUserIp(java.lang.String userIp) {
      return (MessagesByChatUpdate) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public MessagesByChatUpdate setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.Long timestamp;

    /**

     */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    public MessagesByChatUpdate setTimestamp(java.lang.Long timestamp) {
      this.timestamp = timestamp;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public MessagesByChatUpdate setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String doNotMark;

    /**

     */
    public java.lang.String getDoNotMark() {
      return doNotMark;
    }

    public MessagesByChatUpdate setDoNotMark(java.lang.String doNotMark) {
      this.doNotMark = doNotMark;
      return this;
    }

    @Override
    public MessagesByChatUpdate set(String parameterName, Object value) {
      return (MessagesByChatUpdate) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "readReceiptMessage".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link ReadReceiptMessage#execute()} method to invoke the remote operation.
   *
   * @param chatId
   * @param userId
   * @return the request
   */
  public ReadReceiptMessage readReceiptMessage(java.lang.String chatId, java.lang.String userId) throws java.io.IOException {
    ReadReceiptMessage result = new ReadReceiptMessage(chatId, userId);
    initialize(result);
    return result;
  }

  public class ReadReceiptMessage extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.ReadReceipt> {

    private static final String REST_PATH = "readReceiptMessageForChat/{chatId}/{userId}";

    /**
     * Create a request for the method "readReceiptMessage".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link ReadReceiptMessage#execute()} method to invoke the remote
     * operation. <p> {@link ReadReceiptMessage#initialize(com.google.api.client.googleapis.services.A
     * bstractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param chatId
     * @param userId
     * @since 1.13
     */
    protected ReadReceiptMessage(java.lang.String chatId, java.lang.String userId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.ReadReceipt.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
    }

    @Override
    public ReadReceiptMessage setAlt(java.lang.String alt) {
      return (ReadReceiptMessage) super.setAlt(alt);
    }

    @Override
    public ReadReceiptMessage setFields(java.lang.String fields) {
      return (ReadReceiptMessage) super.setFields(fields);
    }

    @Override
    public ReadReceiptMessage setKey(java.lang.String key) {
      return (ReadReceiptMessage) super.setKey(key);
    }

    @Override
    public ReadReceiptMessage setOauthToken(java.lang.String oauthToken) {
      return (ReadReceiptMessage) super.setOauthToken(oauthToken);
    }

    @Override
    public ReadReceiptMessage setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (ReadReceiptMessage) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public ReadReceiptMessage setQuotaUser(java.lang.String quotaUser) {
      return (ReadReceiptMessage) super.setQuotaUser(quotaUser);
    }

    @Override
    public ReadReceiptMessage setUserIp(java.lang.String userIp) {
      return (ReadReceiptMessage) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public ReadReceiptMessage setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public ReadReceiptMessage setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public ReadReceiptMessage set(String parameterName, Object value) {
      return (ReadReceiptMessage) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "requestFriendship".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link RequestFriendship#execute()} method to invoke the remote operation.
   *
   * @param initiatorId
   * @param receiverId
   * @return the request
   */
  public RequestFriendship requestFriendship(java.lang.String initiatorId, java.lang.String receiverId) throws java.io.IOException {
    RequestFriendship result = new RequestFriendship(initiatorId, receiverId);
    initialize(result);
    return result;
  }

  public class RequestFriendship extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.Friendship> {

    private static final String REST_PATH = "requestFriendship/{initiatorId}/{receiverId}";

    /**
     * Create a request for the method "requestFriendship".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link RequestFriendship#execute()} method to invoke the remote
     * operation. <p> {@link RequestFriendship#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param initiatorId
     * @param receiverId
     * @since 1.13
     */
    protected RequestFriendship(java.lang.String initiatorId, java.lang.String receiverId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.Friendship.class);
      this.initiatorId = com.google.api.client.util.Preconditions.checkNotNull(initiatorId, "Required parameter initiatorId must be specified.");
      this.receiverId = com.google.api.client.util.Preconditions.checkNotNull(receiverId, "Required parameter receiverId must be specified.");
    }

    @Override
    public RequestFriendship setAlt(java.lang.String alt) {
      return (RequestFriendship) super.setAlt(alt);
    }

    @Override
    public RequestFriendship setFields(java.lang.String fields) {
      return (RequestFriendship) super.setFields(fields);
    }

    @Override
    public RequestFriendship setKey(java.lang.String key) {
      return (RequestFriendship) super.setKey(key);
    }

    @Override
    public RequestFriendship setOauthToken(java.lang.String oauthToken) {
      return (RequestFriendship) super.setOauthToken(oauthToken);
    }

    @Override
    public RequestFriendship setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (RequestFriendship) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public RequestFriendship setQuotaUser(java.lang.String quotaUser) {
      return (RequestFriendship) super.setQuotaUser(quotaUser);
    }

    @Override
    public RequestFriendship setUserIp(java.lang.String userIp) {
      return (RequestFriendship) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String initiatorId;

    /**

     */
    public java.lang.String getInitiatorId() {
      return initiatorId;
    }

    public RequestFriendship setInitiatorId(java.lang.String initiatorId) {
      this.initiatorId = initiatorId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String receiverId;

    /**

     */
    public java.lang.String getReceiverId() {
      return receiverId;
    }

    public RequestFriendship setReceiverId(java.lang.String receiverId) {
      this.receiverId = receiverId;
      return this;
    }

    @Override
    public RequestFriendship set(String parameterName, Object value) {
      return (RequestFriendship) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "searchUsers".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link SearchUsers#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param name
   * @return the request
   */
  public SearchUsers searchUsers(java.lang.String userId, java.lang.String name) throws java.io.IOException {
    SearchUsers result = new SearchUsers(userId, name);
    initialize(result);
    return result;
  }

  public class SearchUsers extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.UserSearchResultCollection> {

    private static final String REST_PATH = "searchUsers/{userId}/{name}";

    /**
     * Create a request for the method "searchUsers".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link SearchUsers#execute()} method to invoke the remote
     * operation. <p> {@link
     * SearchUsers#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param name
     * @since 1.13
     */
    protected SearchUsers(java.lang.String userId, java.lang.String name) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.UserSearchResultCollection.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
    }

    @Override
    public SearchUsers setAlt(java.lang.String alt) {
      return (SearchUsers) super.setAlt(alt);
    }

    @Override
    public SearchUsers setFields(java.lang.String fields) {
      return (SearchUsers) super.setFields(fields);
    }

    @Override
    public SearchUsers setKey(java.lang.String key) {
      return (SearchUsers) super.setKey(key);
    }

    @Override
    public SearchUsers setOauthToken(java.lang.String oauthToken) {
      return (SearchUsers) super.setOauthToken(oauthToken);
    }

    @Override
    public SearchUsers setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SearchUsers) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SearchUsers setQuotaUser(java.lang.String quotaUser) {
      return (SearchUsers) super.setQuotaUser(quotaUser);
    }

    @Override
    public SearchUsers setUserIp(java.lang.String userIp) {
      return (SearchUsers) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public SearchUsers setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public SearchUsers setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @Override
    public SearchUsers set(String parameterName, Object value) {
      return (SearchUsers) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "sendMessageToUser".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link SendMessageToUser#execute()} method to invoke the remote operation.
   *
   * @param pushkey
   * @param regId
   * @param message
   * @param title
   * @param senderId
   * @return the request
   */
  public SendMessageToUser sendMessageToUser(java.lang.String pushkey, java.lang.String regId, java.lang.String message, java.lang.String title, java.lang.String senderId) throws java.io.IOException {
    SendMessageToUser result = new SendMessageToUser(pushkey, regId, message, title, senderId);
    initialize(result);
    return result;
  }

  public class SendMessageToUser extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.DummyObject> {

    private static final String REST_PATH = "sendMessageToUser/{pushkey}/{regId}/{message}/{title}/{senderId}";

    /**
     * Create a request for the method "sendMessageToUser".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link SendMessageToUser#execute()} method to invoke the remote
     * operation. <p> {@link SendMessageToUser#initialize(com.google.api.client.googleapis.services.Ab
     * stractGoogleClientRequest)} must be called to initialize this instance immediately after
     * invoking the constructor. </p>
     *
     * @param pushkey
     * @param regId
     * @param message
     * @param title
     * @param senderId
     * @since 1.13
     */
    protected SendMessageToUser(java.lang.String pushkey, java.lang.String regId, java.lang.String message, java.lang.String title, java.lang.String senderId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.DummyObject.class);
      this.pushkey = com.google.api.client.util.Preconditions.checkNotNull(pushkey, "Required parameter pushkey must be specified.");
      this.regId = com.google.api.client.util.Preconditions.checkNotNull(regId, "Required parameter regId must be specified.");
      this.message = com.google.api.client.util.Preconditions.checkNotNull(message, "Required parameter message must be specified.");
      this.title = com.google.api.client.util.Preconditions.checkNotNull(title, "Required parameter title must be specified.");
      this.senderId = com.google.api.client.util.Preconditions.checkNotNull(senderId, "Required parameter senderId must be specified.");
    }

    @Override
    public SendMessageToUser setAlt(java.lang.String alt) {
      return (SendMessageToUser) super.setAlt(alt);
    }

    @Override
    public SendMessageToUser setFields(java.lang.String fields) {
      return (SendMessageToUser) super.setFields(fields);
    }

    @Override
    public SendMessageToUser setKey(java.lang.String key) {
      return (SendMessageToUser) super.setKey(key);
    }

    @Override
    public SendMessageToUser setOauthToken(java.lang.String oauthToken) {
      return (SendMessageToUser) super.setOauthToken(oauthToken);
    }

    @Override
    public SendMessageToUser setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (SendMessageToUser) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public SendMessageToUser setQuotaUser(java.lang.String quotaUser) {
      return (SendMessageToUser) super.setQuotaUser(quotaUser);
    }

    @Override
    public SendMessageToUser setUserIp(java.lang.String userIp) {
      return (SendMessageToUser) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String pushkey;

    /**

     */
    public java.lang.String getPushkey() {
      return pushkey;
    }

    public SendMessageToUser setPushkey(java.lang.String pushkey) {
      this.pushkey = pushkey;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String regId;

    /**

     */
    public java.lang.String getRegId() {
      return regId;
    }

    public SendMessageToUser setRegId(java.lang.String regId) {
      this.regId = regId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String message;

    /**

     */
    public java.lang.String getMessage() {
      return message;
    }

    public SendMessageToUser setMessage(java.lang.String message) {
      this.message = message;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String title;

    /**

     */
    public java.lang.String getTitle() {
      return title;
    }

    public SendMessageToUser setTitle(java.lang.String title) {
      this.title = title;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String senderId;

    /**

     */
    public java.lang.String getSenderId() {
      return senderId;
    }

    public SendMessageToUser setSenderId(java.lang.String senderId) {
      this.senderId = senderId;
      return this;
    }

    @Override
    public SendMessageToUser set(String parameterName, Object value) {
      return (SendMessageToUser) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeChat".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link StoreChat#execute()} method to invoke the remote operation.
   *
   * @param chatName
   * @param creatorId
   * @param creatorName
   * @param csvUserIds
   * @return the request
   */
  public StoreChat storeChat(java.lang.String chatName, java.lang.String creatorId, java.lang.String creatorName, java.lang.String csvUserIds) throws java.io.IOException {
    StoreChat result = new StoreChat(chatName, creatorId, creatorName, csvUserIds);
    initialize(result);
    return result;
  }

  public class StoreChat extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.Chat> {

    private static final String REST_PATH = "storeChat/{chatName}/{creatorId}/{creatorName}/{csvUserIds}";

    /**
     * Create a request for the method "storeChat".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link StoreChat#execute()} method to invoke the remote
     * operation. <p> {@link
     * StoreChat#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param chatName
     * @param creatorId
     * @param creatorName
     * @param csvUserIds
     * @since 1.13
     */
    protected StoreChat(java.lang.String chatName, java.lang.String creatorId, java.lang.String creatorName, java.lang.String csvUserIds) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.Chat.class);
      this.chatName = com.google.api.client.util.Preconditions.checkNotNull(chatName, "Required parameter chatName must be specified.");
      this.creatorId = com.google.api.client.util.Preconditions.checkNotNull(creatorId, "Required parameter creatorId must be specified.");
      this.creatorName = com.google.api.client.util.Preconditions.checkNotNull(creatorName, "Required parameter creatorName must be specified.");
      this.csvUserIds = com.google.api.client.util.Preconditions.checkNotNull(csvUserIds, "Required parameter csvUserIds must be specified.");
    }

    @Override
    public StoreChat setAlt(java.lang.String alt) {
      return (StoreChat) super.setAlt(alt);
    }

    @Override
    public StoreChat setFields(java.lang.String fields) {
      return (StoreChat) super.setFields(fields);
    }

    @Override
    public StoreChat setKey(java.lang.String key) {
      return (StoreChat) super.setKey(key);
    }

    @Override
    public StoreChat setOauthToken(java.lang.String oauthToken) {
      return (StoreChat) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreChat setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreChat) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreChat setQuotaUser(java.lang.String quotaUser) {
      return (StoreChat) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreChat setUserIp(java.lang.String userIp) {
      return (StoreChat) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatName;

    /**

     */
    public java.lang.String getChatName() {
      return chatName;
    }

    public StoreChat setChatName(java.lang.String chatName) {
      this.chatName = chatName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String creatorId;

    /**

     */
    public java.lang.String getCreatorId() {
      return creatorId;
    }

    public StoreChat setCreatorId(java.lang.String creatorId) {
      this.creatorId = creatorId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String creatorName;

    /**

     */
    public java.lang.String getCreatorName() {
      return creatorName;
    }

    public StoreChat setCreatorName(java.lang.String creatorName) {
      this.creatorName = creatorName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String csvUserIds;

    /**

     */
    public java.lang.String getCsvUserIds() {
      return csvUserIds;
    }

    public StoreChat setCsvUserIds(java.lang.String csvUserIds) {
      this.csvUserIds = csvUserIds;
      return this;
    }

    @Override
    public StoreChat set(String parameterName, Object value) {
      return (StoreChat) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeChatName".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link StoreChatName#execute()} method to invoke the remote operation.
   *
   * @param chatId
   * @param chatName
   * @param userId
   * @param name
   * @return the request
   */
  public StoreChatName storeChatName(java.lang.String chatId, java.lang.String chatName, java.lang.String userId, java.lang.String name) throws java.io.IOException {
    StoreChatName result = new StoreChatName(chatId, chatName, userId, name);
    initialize(result);
    return result;
  }

  public class StoreChatName extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.Chat> {

    private static final String REST_PATH = "storeChatName/{chatId}/{chatName}/{userId}/{name}";

    /**
     * Create a request for the method "storeChatName".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link StoreChatName#execute()} method to invoke the remote
     * operation. <p> {@link StoreChatName#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param chatId
     * @param chatName
     * @param userId
     * @param name
     * @since 1.13
     */
    protected StoreChatName(java.lang.String chatId, java.lang.String chatName, java.lang.String userId, java.lang.String name) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.Chat.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
      this.chatName = com.google.api.client.util.Preconditions.checkNotNull(chatName, "Required parameter chatName must be specified.");
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
    }

    @Override
    public StoreChatName setAlt(java.lang.String alt) {
      return (StoreChatName) super.setAlt(alt);
    }

    @Override
    public StoreChatName setFields(java.lang.String fields) {
      return (StoreChatName) super.setFields(fields);
    }

    @Override
    public StoreChatName setKey(java.lang.String key) {
      return (StoreChatName) super.setKey(key);
    }

    @Override
    public StoreChatName setOauthToken(java.lang.String oauthToken) {
      return (StoreChatName) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreChatName setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreChatName) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreChatName setQuotaUser(java.lang.String quotaUser) {
      return (StoreChatName) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreChatName setUserIp(java.lang.String userIp) {
      return (StoreChatName) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public StoreChatName setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String chatName;

    /**

     */
    public java.lang.String getChatName() {
      return chatName;
    }

    public StoreChatName setChatName(java.lang.String chatName) {
      this.chatName = chatName;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public StoreChatName setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public StoreChatName setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @Override
    public StoreChatName set(String parameterName, Object value) {
      return (StoreChatName) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeImageUrl".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link StoreImageUrl#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param imageUrl
   * @return the request
   */
  public StoreImageUrl storeImageUrl(java.lang.String userId, java.lang.String imageUrl) throws java.io.IOException {
    StoreImageUrl result = new StoreImageUrl(userId, imageUrl);
    initialize(result);
    return result;
  }

  public class StoreImageUrl extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.User> {

    private static final String REST_PATH = "storeImageUrl/{userId}/{imageUrl}";

    /**
     * Create a request for the method "storeImageUrl".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link StoreImageUrl#execute()} method to invoke the remote
     * operation. <p> {@link StoreImageUrl#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param userId
     * @param imageUrl
     * @since 1.13
     */
    protected StoreImageUrl(java.lang.String userId, java.lang.String imageUrl) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.User.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.imageUrl = com.google.api.client.util.Preconditions.checkNotNull(imageUrl, "Required parameter imageUrl must be specified.");
    }

    @Override
    public StoreImageUrl setAlt(java.lang.String alt) {
      return (StoreImageUrl) super.setAlt(alt);
    }

    @Override
    public StoreImageUrl setFields(java.lang.String fields) {
      return (StoreImageUrl) super.setFields(fields);
    }

    @Override
    public StoreImageUrl setKey(java.lang.String key) {
      return (StoreImageUrl) super.setKey(key);
    }

    @Override
    public StoreImageUrl setOauthToken(java.lang.String oauthToken) {
      return (StoreImageUrl) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreImageUrl setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreImageUrl) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreImageUrl setQuotaUser(java.lang.String quotaUser) {
      return (StoreImageUrl) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreImageUrl setUserIp(java.lang.String userIp) {
      return (StoreImageUrl) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public StoreImageUrl setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String imageUrl;

    /**

     */
    public java.lang.String getImageUrl() {
      return imageUrl;
    }

    public StoreImageUrl setImageUrl(java.lang.String imageUrl) {
      this.imageUrl = imageUrl;
      return this;
    }

    @Override
    public StoreImageUrl set(String parameterName, Object value) {
      return (StoreImageUrl) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeName".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link StoreName#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param name
   * @return the request
   */
  public StoreName storeName(java.lang.String userId, java.lang.String name) throws java.io.IOException {
    StoreName result = new StoreName(userId, name);
    initialize(result);
    return result;
  }

  public class StoreName extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.User> {

    private static final String REST_PATH = "storeName/{userId}/{name}";

    /**
     * Create a request for the method "storeName".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link StoreName#execute()} method to invoke the remote
     * operation. <p> {@link
     * StoreName#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param name
     * @since 1.13
     */
    protected StoreName(java.lang.String userId, java.lang.String name) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.User.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.name = com.google.api.client.util.Preconditions.checkNotNull(name, "Required parameter name must be specified.");
    }

    @Override
    public StoreName setAlt(java.lang.String alt) {
      return (StoreName) super.setAlt(alt);
    }

    @Override
    public StoreName setFields(java.lang.String fields) {
      return (StoreName) super.setFields(fields);
    }

    @Override
    public StoreName setKey(java.lang.String key) {
      return (StoreName) super.setKey(key);
    }

    @Override
    public StoreName setOauthToken(java.lang.String oauthToken) {
      return (StoreName) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreName setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreName) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreName setQuotaUser(java.lang.String quotaUser) {
      return (StoreName) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreName setUserIp(java.lang.String userIp) {
      return (StoreName) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public StoreName setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String name;

    /**

     */
    public java.lang.String getName() {
      return name;
    }

    public StoreName setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    @Override
    public StoreName set(String parameterName, Object value) {
      return (StoreName) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "storeRegId".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link StoreRegId#execute()} method to invoke the remote operation.
   *
   * @param userId
   * @param regId
   * @return the request
   */
  public StoreRegId storeRegId(java.lang.String userId, java.lang.String regId) throws java.io.IOException {
    StoreRegId result = new StoreRegId(userId, regId);
    initialize(result);
    return result;
  }

  public class StoreRegId extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.User> {

    private static final String REST_PATH = "storeRegId/{userId}/{regId}";

    /**
     * Create a request for the method "storeRegId".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link StoreRegId#execute()} method to invoke the remote
     * operation. <p> {@link
     * StoreRegId#initialize(com.google.api.client.googleapis.services.AbstractGoogleClientRequest)}
     * must be called to initialize this instance immediately after invoking the constructor. </p>
     *
     * @param userId
     * @param regId
     * @since 1.13
     */
    protected StoreRegId(java.lang.String userId, java.lang.String regId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.User.class);
      this.userId = com.google.api.client.util.Preconditions.checkNotNull(userId, "Required parameter userId must be specified.");
      this.regId = com.google.api.client.util.Preconditions.checkNotNull(regId, "Required parameter regId must be specified.");
    }

    @Override
    public StoreRegId setAlt(java.lang.String alt) {
      return (StoreRegId) super.setAlt(alt);
    }

    @Override
    public StoreRegId setFields(java.lang.String fields) {
      return (StoreRegId) super.setFields(fields);
    }

    @Override
    public StoreRegId setKey(java.lang.String key) {
      return (StoreRegId) super.setKey(key);
    }

    @Override
    public StoreRegId setOauthToken(java.lang.String oauthToken) {
      return (StoreRegId) super.setOauthToken(oauthToken);
    }

    @Override
    public StoreRegId setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (StoreRegId) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public StoreRegId setQuotaUser(java.lang.String quotaUser) {
      return (StoreRegId) super.setQuotaUser(quotaUser);
    }

    @Override
    public StoreRegId setUserIp(java.lang.String userIp) {
      return (StoreRegId) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String userId;

    /**

     */
    public java.lang.String getUserId() {
      return userId;
    }

    public StoreRegId setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    @com.google.api.client.util.Key
    private java.lang.String regId;

    /**

     */
    public java.lang.String getRegId() {
      return regId;
    }

    public StoreRegId setRegId(java.lang.String regId) {
      this.regId = regId;
      return this;
    }

    @Override
    public StoreRegId set(String parameterName, Object value) {
      return (StoreRegId) super.set(parameterName, value);
    }
  }

  /**
   * Create a request for the method "usersByChatId".
   *
   * This request holds the parameters needed by the messaging server.  After setting any optional
   * parameters, call the {@link UsersByChatId#execute()} method to invoke the remote operation.
   *
   * @param chatId
   * @return the request
   */
  public UsersByChatId usersByChatId(java.lang.String chatId) throws java.io.IOException {
    UsersByChatId result = new UsersByChatId(chatId);
    initialize(result);
    return result;
  }

  public class UsersByChatId extends MessagingRequest<com.personal.rowan.paperforspotify.backend.messaging.model.UserCollection> {

    private static final String REST_PATH = "usersByChatId/{chatId}";

    /**
     * Create a request for the method "usersByChatId".
     *
     * This request holds the parameters needed by the the messaging server.  After setting any
     * optional parameters, call the {@link UsersByChatId#execute()} method to invoke the remote
     * operation. <p> {@link UsersByChatId#initialize(com.google.api.client.googleapis.services.Abstra
     * ctGoogleClientRequest)} must be called to initialize this instance immediately after invoking
     * the constructor. </p>
     *
     * @param chatId
     * @since 1.13
     */
    protected UsersByChatId(java.lang.String chatId) {
      super(Messaging.this, "POST", REST_PATH, null, com.personal.rowan.paperforspotify.backend.messaging.model.UserCollection.class);
      this.chatId = com.google.api.client.util.Preconditions.checkNotNull(chatId, "Required parameter chatId must be specified.");
    }

    @Override
    public UsersByChatId setAlt(java.lang.String alt) {
      return (UsersByChatId) super.setAlt(alt);
    }

    @Override
    public UsersByChatId setFields(java.lang.String fields) {
      return (UsersByChatId) super.setFields(fields);
    }

    @Override
    public UsersByChatId setKey(java.lang.String key) {
      return (UsersByChatId) super.setKey(key);
    }

    @Override
    public UsersByChatId setOauthToken(java.lang.String oauthToken) {
      return (UsersByChatId) super.setOauthToken(oauthToken);
    }

    @Override
    public UsersByChatId setPrettyPrint(java.lang.Boolean prettyPrint) {
      return (UsersByChatId) super.setPrettyPrint(prettyPrint);
    }

    @Override
    public UsersByChatId setQuotaUser(java.lang.String quotaUser) {
      return (UsersByChatId) super.setQuotaUser(quotaUser);
    }

    @Override
    public UsersByChatId setUserIp(java.lang.String userIp) {
      return (UsersByChatId) super.setUserIp(userIp);
    }

    @com.google.api.client.util.Key
    private java.lang.String chatId;

    /**

     */
    public java.lang.String getChatId() {
      return chatId;
    }

    public UsersByChatId setChatId(java.lang.String chatId) {
      this.chatId = chatId;
      return this;
    }

    @Override
    public UsersByChatId set(String parameterName, Object value) {
      return (UsersByChatId) super.set(parameterName, value);
    }
  }

  /**
   * Builder for {@link Messaging}.
   *
   * <p>
   * Implementation is not thread-safe.
   * </p>
   *
   * @since 1.3.0
   */
  public static final class Builder extends com.google.api.client.googleapis.services.json.AbstractGoogleJsonClient.Builder {

    /**
     * Returns an instance of a new builder.
     *
     * @param transport HTTP transport, which should normally be:
     *        <ul>
     *        <li>Google App Engine:
     *        {@code com.google.api.client.extensions.appengine.http.UrlFetchTransport}</li>
     *        <li>Android: {@code newCompatibleTransport} from
     *        {@code com.google.api.client.extensions.android.http.AndroidHttp}</li>
     *        <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
     *        </li>
     *        </ul>
     * @param jsonFactory JSON factory, which may be:
     *        <ul>
     *        <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
     *        <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
     *        <li>Android Honeycomb or higher:
     *        {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li>
     *        </ul>
     * @param httpRequestInitializer HTTP request initializer or {@code null} for none
     * @since 1.7
     */
    public Builder(com.google.api.client.http.HttpTransport transport, com.google.api.client.json.JsonFactory jsonFactory,
        com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      super(
          transport,
          jsonFactory,
          DEFAULT_ROOT_URL,
          DEFAULT_SERVICE_PATH,
          httpRequestInitializer,
          false);
    }

    /** Builds a new instance of {@link Messaging}. */
    @Override
    public Messaging build() {
      return new Messaging(this);
    }

    @Override
    public Builder setRootUrl(String rootUrl) {
      return (Builder) super.setRootUrl(rootUrl);
    }

    @Override
    public Builder setServicePath(String servicePath) {
      return (Builder) super.setServicePath(servicePath);
    }

    @Override
    public Builder setHttpRequestInitializer(com.google.api.client.http.HttpRequestInitializer httpRequestInitializer) {
      return (Builder) super.setHttpRequestInitializer(httpRequestInitializer);
    }

    @Override
    public Builder setApplicationName(String applicationName) {
      return (Builder) super.setApplicationName(applicationName);
    }

    @Override
    public Builder setSuppressPatternChecks(boolean suppressPatternChecks) {
      return (Builder) super.setSuppressPatternChecks(suppressPatternChecks);
    }

    @Override
    public Builder setSuppressRequiredParameterChecks(boolean suppressRequiredParameterChecks) {
      return (Builder) super.setSuppressRequiredParameterChecks(suppressRequiredParameterChecks);
    }

    @Override
    public Builder setSuppressAllChecks(boolean suppressAllChecks) {
      return (Builder) super.setSuppressAllChecks(suppressAllChecks);
    }

    /**
     * Set the {@link MessagingRequestInitializer}.
     *
     * @since 1.12
     */
    public Builder setMessagingRequestInitializer(
        MessagingRequestInitializer messagingRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(messagingRequestInitializer);
    }

    @Override
    public Builder setGoogleClientRequestInitializer(
        com.google.api.client.googleapis.services.GoogleClientRequestInitializer googleClientRequestInitializer) {
      return (Builder) super.setGoogleClientRequestInitializer(googleClientRequestInitializer);
    }
  }
}
